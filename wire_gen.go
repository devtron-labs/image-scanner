// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/devtron-labs/image-scanner/api"
	"github.com/devtron-labs/image-scanner/client"
	"github.com/devtron-labs/image-scanner/internal/logger"
	"github.com/devtron-labs/image-scanner/internal/sql"
	"github.com/devtron-labs/image-scanner/internal/sql/repository"
	"github.com/devtron-labs/image-scanner/pkg/clairService"
	"github.com/devtron-labs/image-scanner/pkg/grafeasService"
	"github.com/devtron-labs/image-scanner/pkg/klarService"
	"github.com/devtron-labs/image-scanner/pkg/security"
	"github.com/devtron-labs/image-scanner/pkg/user"
	"github.com/devtron-labs/image-scanner/pubsub"
)

// Injectors from Wire.go:

func InitializeApp() (*App, error) {
	sugaredLogger, err := logger.NewSugardLogger()
	if err != nil {
		return nil, err
	}
	pubSubClient, err := client.NewPubSubClient(sugaredLogger)
	if err != nil {
		return nil, err
	}
	testPublishImpl := pubsub.NewTestPublishImpl(pubSubClient, sugaredLogger)
	apiClient := grafeasService.GetGrafeasClient()
	httpClient := logger.NewHttpClient()
	grafeasServiceImpl := grafeasService.NewKlarServiceImpl(sugaredLogger, apiClient, httpClient)
	config, err := sql.GetConfig()
	if err != nil {
		return nil, err
	}
	db, err := sql.NewDbConnection(config, sugaredLogger)
	if err != nil {
		return nil, err
	}
	userRepositoryImpl := repository.NewUserRepositoryImpl(db)
	userServiceImpl := user.NewUserServiceImpl(sugaredLogger, userRepositoryImpl)
	imageScanHistoryRepositoryImpl := repository.NewImageScanHistoryRepositoryImpl(db, sugaredLogger)
	imageScanResultRepositoryImpl := repository.NewImageScanResultRepositoryImpl(db, sugaredLogger)
	imageScanObjectMetaRepositoryImpl := repository.NewImageScanObjectMetaRepositoryImpl(db, sugaredLogger)
	cveStoreRepositoryImpl := repository.NewCveStoreRepositoryImpl(db, sugaredLogger)
	imageScanDeployInfoRepositoryImpl := repository.NewImageScanDeployInfoRepositoryImpl(db, sugaredLogger)
	ciArtifactRepositoryImpl := repository.NewCiArtifactRepositoryImpl(db, sugaredLogger)
	imageScanServiceImpl := security.NewImageScanServiceImpl(sugaredLogger, imageScanHistoryRepositoryImpl, imageScanResultRepositoryImpl, imageScanObjectMetaRepositoryImpl, cveStoreRepositoryImpl, imageScanDeployInfoRepositoryImpl, ciArtifactRepositoryImpl)
	klarConfig, err := klarService.GetKlarConfig()
	if err != nil {
		return nil, err
	}
	dockerArtifactStoreRepositoryImpl := repository.NewDockerArtifactStoreRepositoryImpl(db, sugaredLogger)
	klarServiceImpl := klarService.NewKlarServiceImpl(sugaredLogger, klarConfig, grafeasServiceImpl, userRepositoryImpl, imageScanServiceImpl, dockerArtifactStoreRepositoryImpl)
	clairConfig, err := clairService.GetClairConfig()
	if err != nil {
		return nil, err
	}
	clairServiceImpl := clairService.NewClairServiceImpl(sugaredLogger, clairConfig, httpClient, imageScanServiceImpl, dockerArtifactStoreRepositoryImpl)
	scannerConfig, err := api.GetScannerConfig()
	if err != nil {
		return nil, err
	}
	restHandlerImpl := api.NewRestHandlerImpl(sugaredLogger, testPublishImpl, grafeasServiceImpl, userServiceImpl, imageScanServiceImpl, klarServiceImpl, clairServiceImpl, scannerConfig)
	muxRouter := api.NewMuxRouter(sugaredLogger, restHandlerImpl)
	natSubscriptionImpl, err := pubsub.NewNatSubscription(pubSubClient, sugaredLogger, clairServiceImpl)
	if err != nil {
		return nil, err
	}
	app := NewApp(muxRouter, sugaredLogger, db, natSubscriptionImpl, pubSubClient)
	return app, nil
}
